# 概述
## ISP (互联网服务供应商)
ISP 可以从互联网管理机构获得许多 IP 地址，目前的互联网是一种多层次 ISP 结构， ISP 根据覆盖面积大小分为第一次 ISP ，区域 ISP ，接入 ISP 。互联网交换点 IXP 允许两个 ISP 直接相连。

![](assets/计算机网络-010f0fa8.png)

![](assets/计算机网络-31732254.png)

## 主机通信方式
* 客户-服务器 (C/S) ：客户是服务请求方，服务器是服务提供方

![](assets/计算机网络-0f3e27c7.png)

* 对等 (P2P) ：不区分客户和服务器

![](assets/计算机网络-b63c12d8.png)

## 计算机网络体系
![](assets/计算机网络-9f06b369.png)

### 1.五层协议
* **应用层**：为特定应用程序提供数据传输服务，例如 HTTP、DNS等协议。数据单位为报文。
* **传输层**：为进程提供通用数据传输服务，支持不断增多的应用层协议。   
传输层包括两种协议：传输控制协议 TCP (数据单位为报文段)  和 用户数据报协议 UDP (数据单位为用户数据报)。 TCP 主要提供完整性服务， UDP 主要提供及时性服务。
* **网络层**：为主机提供数据传输服务。网络层把传输层传递下来的报文段或者用户数据报封装成分组。
* **数据链路层**：主机之间可以有很多链路，该层是为同一链路的主机提供数据传输服务。数据链路层吧网络层传递下来的分组封装成帧。
* **物理层**：物理层的作用是在各物理传输媒介上传递比特流，尽可能的屏蔽媒介和通信手段的差异，使数据链路层感受不到差异。

### 2.OSI
* **表示层**：数据压缩、加密以及数据描述，这使得引用程序不必关心在各主机中数据内部各式不同的问题。
* **会话层**：建立和管理会话。

### 3.TCP/IP
相当于五层协议中数据链路层和物理层合并成网络接口层。    
TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。

### 4.数据传递
在向下的过程中，需要添加下层协议所需要的首部或者尾部，向上过程中不断拆开首部和尾部。    
路由器只有下面的三次协议，它不需要为进程或者程序提供服务，因此不需要传输层和应用层。


## 应用层
### 域名系统
DNS 是一个分布式数据库，提供了主机名和 IP 地址间的相互转换服务。此处的分布式是指每个站点只保留自己的数据。域名具有层次结构，从上到下分别是：根域名、顶级域名、二级域名。

![](assets/计算机网络-31eb8a95.png)

DNS 可以使用 UPD 或 TCP 传递，使用端口号为 53 。大多数时候时候用 UDP 传输，这要求域名解析器和域名服务器必须自己处理超时和重传保证可靠性。如果使用 TCP 传输时要满足以下条件：
* 返回响应超过 512 字节
* 区域传送 (指主域名服务器向辅域名服务器传送变化的那部分数据)

### 文件传输协议
FTP 用 TCP 进行连接，需要两个连接来传送一个文件。
* 控制连接：服务器打开端口 21 等待客户端连接，客户端主动建立连接后，使用该链接将命令传送给服务器，并传回服务器应答。
* 数据连接：用来传送一个文件数据。

根据数据连接是否服务器主动建立，FTP 分为主动和被动两种模式：
* 主动模式：服务器端主动建立数据连接，服务器端口号为 20 ，客户端端口号为大于 1024 的随机数。

![](assets/计算机网络-9269451a.png)

* 被动模式：客户端主动建立数据连接，客户端口号自己指定，服务器端口号随机。

![](assets/计算机网络-4a29fa65.png)

主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户配置防火墙，不过由于开放了过多端口会导致服务器端安全性减弱。

### 动态主机配置协议 (DHCP, Dynamic Host Configuration Protocol)
DHCP 提供了即插即用的连网方式，用户不需要手动配置 IP 地址等信息。   
DHCP 配置包括 IP 地址，子网掩码，网管 IP 地址。
DHCP 工作过程如下：    

    1. 客户端发送 Discover 报文，该报文地址为 255.255.255.255:67 ,源地址为 0.0.0.0:68 ，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，则用中继代理。
    2. DHCP 服务器收到 Discover 报文，发送 Offer 报文给客户端，该报文包含客户端需要的信息，因为客户端可能收到多个 DHCP 的服务器提供的信息，因此客户端需要进行选择。
    3. 如果客户端选择了某个 DHCP 服务器提供的信息，那么发送 Request 报文给该 DHCP 服务器。
    4. DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。

![](assets/计算机网络-c33e777f.png)

### 远程登录协议
TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。   
TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统的换行符定义。

### 电子邮件协议
一个电子邮件系统由三部分组成：用户代理，邮件服务器以及邮件协议。    
邮件协议包含发送协议和读取协议，发送协议常用 SMTP ， 读取协议常用 POP3 和 IMAP。   

![](assets/计算机网络-3a0405d2.png)

#### 1.SMTP
SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。 MIME 并没有改动或取代 SMTP ，而是增加邮件主题的结构，定义了 ASCII 码的编码规则。

![](assets/计算机网络-bd6b4eb2.png)

#### 2.POP3
POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。但最新的 POP3 可以不删除邮件。

#### 3.IMAP
IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会删除。该做法可以使用户随时随地访问服务器上的邮件。

### 常用端口

应用|应用层协议|端口号|传输层协议|备注
:-:|:-:|:-:|:-:|:-:
域名解析|DNS|53|UDP/TCP|长度超过 512 字节时使用 TCP
动态主机配置协议|DHCP|67/78|UDP|
简单网络管理协议|SNMP|161/162|UDP|
文件传送协议|FTP|20/21|TCP|控制连接为21，数据连接为20
远程终端协议|TELNET|23|TCP|
超文本传送协议|HTTP|80|TCP|
简单邮件传送协议|SMTP|25|TCP|
邮件读取协议|POP3|110|TCP|
网际报文存取协议|IMAP|143|TCP|

### WEB 页面请求过程
#### 1. DHCP 配置主机信息
* 假设主机最开始没有 IP 地址和其他信息，需要 DHCP 获取。
* 主机生产一个 DHCP 请求报文，并将报文放入具有目的端口 67 和 源端口 68 的 UDP 报文段中。
* 该报文段则被放入在一个具有广播 IP 目的地址 (255.255.255.255) 和源 IP 地址 (0.0.0.0) 的 IP 数据报中。
* 该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:<zero-width space>FF:<zero-width space>FF:<zero-width space>FF:<zero-width space>FF:FF，将广播到与交换机连接的所有设备。
* 连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。
* 该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。
* 主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。

#### 2. ARP 解析 MAC 地址
* 主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。

* 主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。

* 该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。

* 该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。

* DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。

* 主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:<zero-width space>FF:<zero-width space>FF:<zero-width space>FF:<zero-width space>FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。

* 网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。

#### 3. DNS 解析域名
* 知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。

* 网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。

* 因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。

* 到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。

* 找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。

#### 4. HTTP 请求页面
* 有了 HTTP 服务器的 IP 地址后，主机能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。
* 生成 TCP 套接字前，必须咸鱼 HTTP 服务器进行三次握手建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。
* HTTP 服务器收到报文段后，生成 TCP SYN ACK 报文段，返回给主机。
* 建立连接后，浏览器生成 HTTP GET 报文，交付给 HTTP 服务器
* HTTP 服务器收到请求后，生成一个 HTTP 响应报文， 将 Web 页面内容放入到报文主体中返回给主机。
* 浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。


## 传输层
### UDP 和 TCP 的特点
* 用户数据报协议 UDP 是无连接的，尽最大可能交付，没有拥塞控制，面向报文 (应用层报文添加 UDP 首部)，支持一对一，一对多，多对一和多对多的交互通信。
* 传输控制协议 TCP 是面相连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面相字节流 (应用层报文当做字节流，把字节流组织成大小不等的数据块)，每一条 TCP 连接只能是点对点的 (一对一)。

### UDP 首部格式

![](assets/计算机网络-8dc0e262.png)

首部字段只有 8 个字节，包括源端口，目的端口，长度，校验和。12 字节的伪首部是为了计算校验和临时添加的

### TCP 首部格式

![](assets/计算机网络-43ded998.png)

* 序号：用于对字节流进行编号，例如序号为 301 ，表示第一个字节的编号为 301，如果携带的数据长 100 字节，那么下一个报文的序号 是 401 。
* 确认号：期望收到的下一个报文段的序号，例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此下一个 序号应该是 701 ，那么 B 发送的给 A 的确认好就是 701。
* 数据偏移：指的是数据部分距离报文段起始的偏移量，实际上指的是首部的长度。
* 确认 ACK：当 ACK = 1 时确认号字段有效，否则无效。 TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1
* 同步 SYN ：在连接建立时用来同步序号。当 SYN = 1， ACK = 0 时表示这是一个连接请求报文段。若同意，则响应报文中 SYN = 1，ACK = 1.
* 终止 FIN ：涌来时放一个连接，当 FIN = 1 时，表示此报文段的发送方已发送完毕，要求释放连接。
* 窗口：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。

#### TCP 的三次握手

![](assets/计算机网络-91b30d60.png)

A 客户端， B 服务器端。
* 首先 B 处于 LISTEN (监听) 状态， 等待客户的连接请求
* A 向 B 发生连接请求报文，SYN = 1，ACK = 0，选定一个初始的序号 x
* B 收到连接请求报文，如果同意则发送给 A 确认报文，SYN = 1，ACK = 1，确认号为 x + 1，同时返回序号 y
* A 收到确认报文后，向 B 发出确认报文，确认号为 y + 1，序号为 x + 1
* B 收到 A 的确认后，建立连接

A 发送确认报文是为了防止服务器向失效的连接请求打开连接。


#### TCP 的四次挥手

![](assets/计算机网络-b88d51e2.png)

* A 发送连接释放报文，FIN = 1 ， 序号为 u ， ACK = 1
* B 收到请求后发出确认释放报文，此时 TCP 处于半关闭状态， A 不能再向 B 传输数据，确认号为 u + 1 ， 同时进入 COLSED-WAIT 状态等待数据传输完成
* 数据传输完成，B 已经可以释放连接了，向 A 发送连接释放报文，FIN = 1，序号为 w
* A 收到后发出确认释放连接报文，进入 TIME-WAIT 状态 ，等待 2 MSL (最大报文存活时间) 后释放连接。
* B 收到确认报文，释放连接

等待  2 MSL 是为了确保最后一个报文能够到达，否则 B 会发出新的确实释放报文， A 还需要处理这个报文；也是为了让下一次的连接不会出现老的报文请求。

### TCP 可靠传输
**TCP 使用超时重传实现可靠传输**：如果发送的报文在超时时间前没有收到确认，重新发送该报文。   
报文从发出到收到确认的时间成为往返时间 RTT ，加权平均往返时间 RTTs 的计算规则如下：   
> RTTs = (1 - a) * ( RTTs) + a * RTT

其中 a ∈ [0,1) , RTTd 为偏差的加权平均值 , 超时时间 RTO 计算如下：
> RTO = RTTs + 4 * RTTd

#### TCP 的滑动窗口
窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文断中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值设置自己的窗口大小。    

![](assets/计算机网络-7afd031f.png)

如果发送窗口左侧的字节都已经发送且受到了确认，那么发送窗口右移一段距离，直至左侧第一个字节不是已发送且确认状态;接收窗口的滑动类似，如果左侧字节已经发送确认且交付主机，则向右滑动窗口

接收窗口只会对窗口最后一个按序到达的字节进行确认。比如接收窗口 [31~50] 收到了 {31,35,36,38,39},其中按序到达的是 {31},那么只会对字节 31 进行确认操作。 发送方得到一个字节的确认后可以认为该字节前所有的字节都已被接收。

#### TCP 流量控制
为了控制发送方发送速率，保证接收方来得及接收。   
可以用报文中的窗口字段控制发送方的窗口大小，从而影响发送方的发送速率，将窗口字段设为0，则发送方不能发送数据。

#### TCP 拥塞控制
如果网络出现拥塞，分组丢失，此时会让发送方重传，从而导致拥塞度更高。    
此时应该控制发送方速率，从而降低网络的拥塞程度。    

![](assets/计算机网络-a1348964.png)

TCP 主要通过四个算法实现拥塞控制：慢开始、拥塞避免、快重传和快恢复。    
发送方会维护一个叫拥塞窗口 (cwnd) 的状态。

![](assets/计算机网络-43abfb2b.png)

##### 1.慢开始和拥塞避免
发送初始，使 cwnd = 1，发送方发送 1 个报文段，收到确认后，进行翻倍 2，4，8...    
同时设置一个慢开始门限 ssthresh ， 当 cwnd >= ssthresh 后，为避免拥塞，后续每次增长不再翻倍而是改为 +1 。   
如果发生超时，令 ssthresh = cwnd / 2 ， 重新执行慢开始

##### 2.快重传和快恢复
接收方，每次都要对最后一个接收到的有序报文进行确认。    
发送方如果收到三个重复确认，那么可以知道该确认的下一个报文段丢失，此时执行快重传，立刻重传丢失报文段。   
该情况中，只是丢失个别报文段，不是网络拥塞，因此执行快恢复，零 ssthress = cwnd / 2， cwnd = ssthress。   
慢开始和快恢复是快慢设定 cwnd 的起始值。

![](assets/计算机网络-ac9a7184.png)

### 参考资料
* [面向对象设计的 SOLID 原则](https://www.cnblogs.com/shanyou/archive/2009/09/21/1570716.html)
* [看懂 UML 类图和时序图](http://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#generalization)
* [UML 系列——时序图（顺序图）sequence diagram](http://www.cnblogs.com/wolf-sun/p/UML-Sequence-diagram.html)
* [面向对象编程三大特性 ------ 封装、继承、多态](http://blog.csdn.net/jianyuerensheng/article/details/51602015)

### 一、 三大特性
#### 封装
尽可能隐藏对象的细节，只留对外接口供外部访问对象。
优点：
* 减少耦合：可以独立的开发、测试、优化、使用和修改
* 减轻维护的负担：可以更容易被理解，调试时也不会影响其他模块
* 有效的调节性能：可以剖析出哪些模块影响了系统的性能
* 提高软件的可重用性
* 降低构建大型系统的风险：即时系统不可用，单独的模块却可能是可用的

#### 继承
继承实现的是 IS-A 关系，此外对象的关系还有 HAS-A(组合)，Use-A(依赖)。   
继承应该遵循里氏替换原则，子类对象必须能够替换所有的父类对象。

#### 多态
多态分为编译时多态和运行时多态。
* 编译时多态主要指方法的重载
* 运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定  

运行时多态的三个条件：
* 继承
* 重写
* 向上转型

### 二、 类图
#### 泛化关系 (Generalization)
用来描述继承关系，在 Java 中用 extends 关键字实现。
![](assets/面向对象思想-82cb2bb1.png)

#### 实现关系 (Realization)
用来实现一个接口，在 Java 中用 implements 关键字实现。
![](assets/面向对象思想-cf1763eb.png)

#### 聚合关系 (Aggregation)
表示整体由部门组成，但整体和部分不是强依赖，整体没了部分还是回存在。
![](assets/面向对象思想-687cd84c.png)

#### 组合关系 (Composition)
和聚合不同，整体和部分之间时强依赖的，整体消失则部分也会消失。   
比如公司和部门是组合关系，公司没了，部门也就没了;   
公司和员工是聚合关系，公司没了，员工还在。
![](assets/面向对象思想-fc0041e7.png)

#### 关联关系 (Association)
表示不同类之间有关联关系，这是一种静态的关系，在运行之前就已经决定了。   
这种关系可以是一对多，多对一的，比如学生和学校。一个学生属于一个学校，而一个学校可以有多个学生。      
![](assets/面向对象思想-501a8da7.png)

#### 依赖关系 (Dependency)
和关联关系不同，依赖是在运行过程中作用的。变量 A 和变量 B 的依赖关系有三种。   
* A 是 B 的局部变量
* A 是 B 的方法参数
* A 向 B 发送请求从而影响 B 的状态    
![](assets/面向对象思想-a7b39897.png)

### 三、 设计原则
#### S.O.L.I.D
SRP (Single Responsibility Principle)  单一责任原则   
OCP (Open Closed Principle) 开放封闭原则    
LSP (Liskov Subsitution Principle) 里氏替换原则   
ISP (Interface Segregation Principle) 接口分离原则    
DIP (Dependency Inversion Principle) 依赖倒置原则

###### 1.单一责任原则
>修改一个类的原因只有一个.

就是一个类只负责一件事情，当这个类要做的事情太多，就需要分解这个类。    
一个类的职责过多相当于把多个职责耦合在了一起，任一个职责发生变化都可能影响其他的职责。

###### 2.开放封闭原则
>类应该对拓展开放，对修改封闭。

扩展就是添加新功能，要求其在添加功能时不修改代码。   
最典型的设计模式就是装饰者模式，它可以动态的将职责附加到对象上，不用去修改类的代码。

###### 3.里氏替换原则
>子类对象必须能替换所有父类对象

继承是一种 IS-A 关系，子类可以当做父类使用，且要比父类更加丰富。
如果不满足该条件，各子类的行为差异过大，会增加继承体系的难度。

###### 4.接口分离原则
>不应强迫客户依赖他们不用的方法

设计多个接口会比单一的接口好。

###### 5.依赖倒置原则
>高层模块不应该依赖于底层模块，二者应该依赖的是抽象模块。   
抽象不应该依赖于细节，细节应该依赖于抽象。

告辞模块包含一个程序中的策略选择和业务模块，如果高层模块依赖底层模块，那么底层模块的影响会影响到高层模块，从而导致高层模块也被迫改动。   
这意味着：   
* 任何变量都不应该持有一个指向具体类的指针或引用
* 任何方法都不应该从具体类派生
* 任何方法都不应该覆写它的任何基类中已经实现的方法


#### 其它常见原则
LOD (Law of Dmeter) 迪米特法则
CRP (Composite Resue Principle) 合成复用原则
CCP (Common Closure Principle) 共同封闭原则
SAP (Stable Abstract Principle) 稳定抽象原则
SDP (Stable Dependencies Principle) 稳定依赖原则

###### 1.迪米特法则
>又叫最少知识原则，一个对象应该尽可能少的了解另一个对象

###### 2.合成复用原则
>尽量使用对象组合，而不是通过继承来达到复用的效果

###### 3.共同封闭原则
>一起修改的类应该在用一个包内。

###### 4.稳定抽象原则
>最稳定的包应该是最抽象的包，不稳定的包应该是具体的包，即抽象程度和稳定性成正比。

###### 5.稳定依赖原则
>包之间的依赖关系应该都是稳定方向依赖的，包要依赖的包是比自己更加稳定的。

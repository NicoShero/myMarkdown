# 参考资料
[The InnoDB Storage Engine](https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html)
[Transaction isolation levels](https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels)
[Concurrency Control](http://scanftree.com/dbms/2-phase-locking-protocol)
[The Nightmare of Locking, Blocking and Isolation Levels!](https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666)
[Database Normalization and Normal Forms with an Example](https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html)
[The basics of the InnoDB undo logging and history system](https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/)
[MySQL locking for the busy web developer](https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/)
[浅入浅出 MySQL 和 InnoDB](https://draveness.me/mysql-innodb)
[Innodb 中的事务隔离级别和锁的关系](https://tech.meituan.com/2014/08/20/innodb-lock.html)


# 事务
事务指的是满足 ACID 特性的一组操作，通过 Commit 提交一个事务，通过 Rollback 回滚。

![](assets/数据库系统原理-f06d2ac5.png)

## ACID
### 1. 原子性 (Atomicity)
事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。    
回滚可以用回滚日志 (undo log) 来实现，回滚日志记录着事务所执行的修改操作，回滚时反向执行这些修改操作即可。   

### 2. 一致性 (Consistency)
数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果是相同的。

### 3. 隔离性 (Isolation)
一个事务所做的修改在最终提交以前，对其他事务是不可见的。

### 4. 持久性 (Durability)
一旦事务提交，其修改会永远保存在数据库中。即时系统崩溃，事务执行的结果也不能丢失。   
系统崩溃可以用重做日志 (redo log) 恢复，从而实现持久性。其记录的是数据页的物理修改。

>

事务的 ACID 特性不是平级的关系：
* 只有满足一致性，事物的执行结果才是正确的。
* 无并发的情况下，事务串行执行，隔离性一定能满足。此时如果满足原子性，那么就能满足一致性。
* 并发情况下，多个失误并行执行，事务同时满足原子性和隔离性才能满足一致性。
* 实务满足持久化是为了应对系统崩溃的情况。

![](assets/数据库系统原理-a62a86a5.png)

## AUTOCOMMIT
MySQL 默认采用自动提交模式。



# 并发一致性问题
并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。

## 丢失修改
丢失修改指一个事务的更新操作被另外一个事物的更新操作替换。

![](assets/数据库系统原理-476d0dbe.png)

## 读脏数据
读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。

![](assets/数据库系统原理-6722915a.png)

## 不可重复读
指一个事务内多次读取同一数据集合。浙一事务未结束前，另一事务也访问了同一数据集合并修改。由于第二个事务的修改，导致第一个事务两次读取的数据不一致。

![](assets/数据库系统原理-f40412dd.png)

## 幻影读
幻读本质上也属于不可重复读的情况，T1多次读取某个范围的数据，T2插入了新的数据，T1再次读取和第一次的结果不一致。

![](assets/数据库系统原理-d2cb7642.png)


# 封锁
## 封锁粒度
MySQL 中提供了两种封锁粒度：行级锁以及表级锁。
应该尽量只锁定需要修改的那部分数据，而不是所有资源。锁定的资源越少，锁争用的可能就越少，系统并发程度就越高。    
但是加锁需要消耗资源，锁粒度越小，系统开销越大。    
在选择锁粒度时，需要在锁开销和并发程度之间做一个权衡。   

## 封锁类型
### 1. 读写锁
* 互斥锁 (Exclusive) : 简写为 X 锁，又称为写锁
* 共享锁 (Shared) : 简写为 S 锁，又称读锁

有以下两个规定：
* 一个事物对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。期间其他事务无法对 A 加锁
* 一个事物对数据对象 A 加了 S 锁，就可以对 A 进行读取。期间其他事务只能对 A 加 S 锁

![](assets/数据库系统原理-1e38b3ed.png)

### 2. 意向锁
存在行级锁和表级锁的情况下，事务 T 要对表 A 加 X 锁，首先要检测是否有其他事务对 A 或 A 的任意一行加了锁，这需要对 A 的每一行都检测一次，很费时。   
意向锁在 X/S 锁的基础上加了 IX/IS，这两个都是表锁，用来表示一个事务想要在表的某行上加 X 或 S 锁。   
* 一个事务在获得某个数据行对象的 S 锁之前，必须获得表的 IS 锁或更高级别的锁
* 一个事务在获得某个数据行对象的 X 锁之前，必须获得表的 IX 锁

通过引入意向锁，事务 T 想要对表 A 加 X 锁只需要检测是否有其它事务对 A 加了 X/S/IX/IS 锁，如果有则加锁失败。

![](assets/数据库系统原理-2c9f6cf1.png)

解释如下：
* 任意 IS/IX 锁之间都是兼容的，因为他们表明的是加锁意向，并不是真的加锁
* 此处兼容针对的是表级锁，表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁

## 封锁协议
### 1. 三级封锁协议
#### 1.1. 一级封锁协议
事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。避免覆盖。

![](assets/数据库系统原理-e628caa1.png)

#### 1.2. 二级封锁协议
在一级的基础上，要求读取 A 时必须加 S 锁，读取完立即释放 S 锁。避免脏读。

![](assets/数据库系统原理-4e6ea415.png)

#### 1.3. 三级封锁协议
在二级的基础上，要求读取 A 时必须加 S 锁，直到事务结束再释放 S 锁。避免幻读或脏读。

![](assets/数据库系统原理-3d605696.png)

### 2. 两段锁协议
加锁和解锁分为两个阶段进行。    
可串行化调度是指通过并发控制，是的并发执行的事务结果与某个串行执行的事务结果相同。串行的事务互不干扰，不会出现并发一致性的问题。    

## MySQL 隐式和显式锁定
MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有所在同一时刻释放，被称为隐式锁定。    
InnoDB 也可以使用特定语句显式锁定：

    SELECT ... LOCK In SHARE MODE;
    SELECT ... FOR UPDATE;


# 隔离级别
## 未提交读 (READ UNCOMMITTED)
事物的修改，即时没有提交，对其他事务也是可见的

## 提交读 (READ COMMITTED)
一个事务只能读取已经提交的事务做的修改。换句话说，在提交前，事务的改动对其他事务不氪金。

## 可重复读 (REPEATABLE READ)
保证一个事务多次读取同一数据结果是一致的。

## 可串行化 (SERIALIZABLE)
强制事务串行执行，这样多个失误互不干扰，不会出现并发一致性问题。

![](assets/数据库系统原理-43d83cb2.png)


# 多版本并发控制
多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。

## 基本思想
在封锁一节中提到，加锁能解决多个事务同时执行时出现的并发一致性问题。在实际场景中读操作往往多于写操作，因此又引入了读写锁来避免不必要的加锁操作，例如读和读没有互斥关系。读写锁中读和写操作仍然是互斥的，而 MVCC 利用了多版本的思想，写操作更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。

在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。

脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。

## 版本号
* 系统版本号 SYS_ID：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。
* 事务版本号 TRX_ID ：事务开始时的系统版本号。

## Undo 日志
MVCC 的多版本指的是多个版本的快照，快照存储在 Undo 日志中，该日志通过回滚指针 ROLL_PTR 把一个数据行的所有快照连接起来。

例如在 MySQL 创建一个表 t，包含主键 id 和一个字段 x。我们先插入一个数据行，然后对该数据行执行两次更新操作。

    INSERT INTO t(id, x) VALUES(1, "a");
    UPDATE t SET x="b" WHERE id=1;
    UPDATE t SET x="c" WHERE id=1;

因为没有使用 START TRANSACTION 将上面的操作当成一个事务来执行，根据 MySQL 的 AUTOCOMMIT 机制，每个操作都会被当成一个事务来执行，所以上面的操作总共涉及到三个事务。快照中除了记录事务版本号 TRX_ID 和操作之外，还记录了一个 bit 的 DEL 字段，用于标记是否被删除。

![](assets/数据库系统原理-8ed332da.png)

INSERT、UPDATE、DELETE 操作会创建一个日志，并将事务版本号 TRX_ID 写入。DELETE 可以看成是一个特殊的 UPDATE，还会额外将 DEL 字段设置为 1。

## ReadView
MVCC 维护了一个 ReadView 结构，主要包含了当前系统未提交的事务列表 TRX_IDs {TRX_ID_1, TRX_ID_2, ...}，还有该列表的最小值 TRX_ID_MIN 和 TRX_ID_MAX。

![](assets/数据库系统原理-aa5f9eac.png)

在进行 SELECT 操作时，根据数据行快照的 TRX_ID 与 TRX_ID_MIN 和 TRX_ID_MAX 之间的关系，从而判断数据行快照是否可以使用：

* TRX_ID < TRX_ID_MIN，表示该数据行快照时在当前所有未提交事务之前进行更改的，因此可以使用。

* TRX_ID > TRX_ID_MAX，表示该数据行快照是在事务启动之后被更改的，因此不可使用。

* TRX_ID_MIN <= TRX_ID <= TRX_ID_MAX，需要根据隔离级别再进行判断：
  * 提交读：如果 TRX_ID 在 TRX_IDs 列表中，表示该数据行快照对应的事务还未提交，则该快照不可使用。否则表示已经提交，可以使用。
  *  可重复读：都不可以使用。因为如果可以使用的话，那么其它事务也可以读到这个数据行快照并进行修改，那么当前事务再去读这个数据行得到的值就会发生改变，也就是出现了不可重复读问题。

在数据行快照不可使用的情况下，需要沿着 Undo Log 的回滚指针 ROLL_PTR 找到下一个快照，再进行上面的判断。

## 快照读与当前读
### 1. 快照读
MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。

    SELECT * FROM table ...;

### 2. 当前读
MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。

    INSERT;
    UPDATE;
    DELETE;

在进行 SELECT 操作时，可以强制指定进行加锁操作。以下第一个语句需要加 S 锁，第二个需要加 X 锁。
    SELECT * FROM table WHERE ? lock in share mode;
    SELECT * FROM table WHERE ? for update;


# Next-Key Locks
Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。

MVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。

## Record Locks
锁定一个记录上的索引，而不是记录本身。

如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。

## Gap Locks
锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。

    SELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;

## Next-Key Locks
它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间，例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：

    (-∞, 10]
      (10, 11]
        (11, 13]
          (13, 20]
            (20, +∞)


# 关系数据库设计理论
## 函数依赖
记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。

如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。

对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖。

对于 A->B，B->C，则 A->C 是一个传递函数依赖。

## 异常
以下的学生课程关系的函数依赖为 {Sno, Cname} -> {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。

Sno	| Sname	| Sdept	| Mname	|	Cname	| Grade
:-:	| :---:	| :--:	| :--:	| :--:	| :---:
1   |学生-1 |学院-1 |院长-1  |课程-1 |90
2   |学生-2 |学院-2	|院长-2  |课程-2 |80
2   |学生-2 |学院-2	|院长-2	 |课程-1 |100
3	  |学生-3	|学院-2	|院长-2	 |课程-2 |95

不符合范式的关系会产生很多异常，主要有：
* 冗余数据：例如 学生-2 出现了两次。
* 修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。
* 删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 课程-1 需要删除第一行和第三行，那么 学生-1 的信息就会丢失。
* 插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。

## 范式
范式理论是为了解决以上提到四种异常。    
高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。   
### 1. 第一范式 (1NF)
属性不可分

### 2. 第二范式 (2NF)
每个非主属性完全函数依赖于键码   
可通过分解来满足

**分解前**

Sno	| Sname	| Sdept	| Mname	|	Cname	| Grade
:-:	| :---:	| :--:	| :--:	| :--:	| :---:
1   |学生-1 |学院-1 |院长-1  |课程-1 |90
2   |学生-2 |学院-2	|院长-2  |课程-2 |80
2   |学生-2 |学院-2	|院长-2	 |课程-1 |100
3	  |学生-3	|学院-2	|院长-2	 |课程-2 |95

以上关系中，{Sno,Cname} 为键码，有如下依赖：
* Sno -> Sname,Sdept
* Sdept -> Mname
* Sno,Cname -> Grade

Grade 完全函数依赖于键码，没有任何冗余数据，每个学生的每门课都有特定成绩。    
Sname，Sdept 和 Mname 部分依赖键码，当学生选修多门课，数据会出现多次，大量冗余

**分解后**

关系 -1

Sno	|Sname	|Sdept	|Mname
:-:	| :---:	| :--:	| :--:
1	|学生-1	|学院-1	|院长-1
2	|学生-2	|学院-2	|院长-2
3	|学生-3	|学院-2	|院长-2

有以下函数依赖：
* Sno -> Sname，Sdept
* Sdept -> Mname

关系 -2

Sno	|Cname	|Grade
:-:	| :---:	| :--:
1	|课程-1	|90
2	|课程-2	|80
3	|课程-2	|95
2	|课程-1	|100

有以下函数依赖：
* Sno，Cname -> Grade

### 3. 第三范式 (3NF)
非主属性不传递函数依赖于键码。   
上面关系 -1 存在以下传递函数依赖：
* Sno -> Sdpet -> Mname

可以进行一下分解：   
关系 -11

Sno	|Sname	|Sdept
:-:	| :---:	| :--:
1	|学生-1	|学院-1
2	|学生-2	|学院-2
3	|学生-3	|学院-2

关系 -12

Sdept	|Mname
:-:	| :---:
学院-1	|院长-1
学院-2	|院长-2


# ER (Entity-Relationship) 图
ER 图有三个组成部分：实体，属性，联系
用来进行关系型数据库系统的概念设计。

## 实体的三种联系
一对一，一对多，多对多
* 如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；
* 如果是一对一，画两个带箭头的线段；
* 如果是多对多，画两个不带箭头的线段。

下图的 Course 和 Student 是一对多的关系。

![](assets/数据库系统原理-63d1e7b3.png)

## 表示出现多次的关系
一个实体在联系出现几次，就要用几条线连接。

下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。

![](assets/数据库系统原理-58a00f49.png)

## 联系的多向性
虽然老师可以开设多门课，教多个学生，但对于学生和课程，只有一个特定的老师，这就构成了一个三元联系    

![](assets/数据库系统原理-f5ac2938.png)

## 表示子类
用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。

![](assets/数据库系统原理-61e2ba13.png)
